# Generated by Django 4.2.4 on 2023-08-21 22:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("django_roles", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FilterReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=250, verbose_name="Label")),
                (
                    "source_model",
                    models.CharField(max_length=250, verbose_name="Source Model"),
                ),
                (
                    "destination_model",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Destination Model",
                    ),
                ),
                ("filter_string", models.TextField(verbose_name="Filter String")),
                (
                    "input_type",
                    models.CharField(max_length=20, verbose_name="Input Type"),
                ),
                (
                    "children",
                    models.JSONField(blank=True, null=True, verbose_name="Children"),
                ),
                (
                    "choices",
                    models.JSONField(blank=True, null=True, verbose_name="Choices"),
                ),
                (
                    "help_text",
                    models.CharField(max_length=250, verbose_name="Field Help"),
                ),
            ],
            options={
                "verbose_name": "Filter Reference",
                "verbose_name_plural": "Filter References",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="UserQueryValue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the object is active Unselect this instead of deleting objects",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the object was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time the object was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "filter_name",
                    models.CharField(
                        help_text="The name of the filter",
                        max_length=250,
                        verbose_name="Filter Name",
                    ),
                ),
                (
                    "lookup",
                    models.CharField(
                        choices=[
                            ("__exact", "Exact"),
                            ("__contains", "Contains"),
                            ("__startswith", "Starts With"),
                            ("__endswith", "Ends With"),
                            ("__on", "On"),
                            ("__lt", "Before"),
                            ("__gt", "After"),
                            ("__lt", "Less Than"),
                            ("__gt", "Greater Than"),
                            ("__isnull", "Blank"),
                        ],
                        help_text="Lookup",
                        max_length=12,
                        verbose_name="Lookup",
                    ),
                ),
                (
                    "negate_filter",
                    models.BooleanField(
                        default=False,
                        help_text="Negate the filter, excluding the value from the queryset",
                        verbose_name="Negate Filter",
                    ),
                ),
                (
                    "character_value",
                    models.CharField(
                        blank=True,
                        help_text="Character Value",
                        max_length=250,
                        null=True,
                        verbose_name="Character",
                    ),
                ),
                (
                    "boolean_value",
                    models.BooleanField(
                        blank=True,
                        help_text="Boolean Value",
                        null=True,
                        verbose_name="Boolean Value",
                    ),
                ),
                (
                    "date_field",
                    models.DateField(
                        blank=True,
                        help_text="Date Value",
                        null=True,
                        verbose_name="Date Value",
                    ),
                ),
                (
                    "datetime_value",
                    models.TimeField(
                        blank=True,
                        help_text="Datetime Value",
                        null=True,
                        verbose_name="DateTime Value",
                    ),
                ),
                (
                    "decimal_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Decimal Value",
                        max_digits=19,
                        null=True,
                        verbose_name="Decimal Value",
                    ),
                ),
                (
                    "email_value",
                    models.EmailField(
                        blank=True,
                        help_text="Email Value",
                        max_length=254,
                        null=True,
                        verbose_name="Email Value",
                    ),
                ),
                (
                    "float_value",
                    models.FloatField(
                        blank=True,
                        help_text="Float Value",
                        null=True,
                        verbose_name="Float Value",
                    ),
                ),
                (
                    "ip_value",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP Value",
                        null=True,
                        verbose_name="IP Value",
                    ),
                ),
                (
                    "integer_value",
                    models.IntegerField(
                        blank=True,
                        help_text="Integer Value",
                        null=True,
                        verbose_name="Integer Value",
                    ),
                ),
                (
                    "json_value",
                    models.JSONField(
                        blank=True,
                        help_text="JSON Value",
                        null=True,
                        verbose_name="JSON Value",
                    ),
                ),
                (
                    "text_value",
                    models.TextField(
                        blank=True,
                        help_text="Text Value",
                        null=True,
                        verbose_name="Text Value",
                    ),
                ),
                (
                    "time_value",
                    models.TimeField(
                        blank=True,
                        help_text="Time Value",
                        null=True,
                        verbose_name="Time Value",
                    ),
                ),
                (
                    "url_value",
                    models.URLField(
                        blank=True,
                        help_text="URL Value",
                        null=True,
                        verbose_name="URL Value",
                    ),
                ),
                (
                    "uuid_value",
                    models.UUIDField(
                        blank=True,
                        help_text="UUID Value",
                        null=True,
                        verbose_name="UUID Value",
                    ),
                ),
                (
                    "object_id_value",
                    models.UUIDField(
                        blank=True,
                        help_text="Object ID Value",
                        null=True,
                        verbose_name="Object ID Value",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="The database content type of the query value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="userqueryvalues",
                        to="contenttypes.contenttype",
                        verbose_name="Content Type",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="The group that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="auth.group",
                        verbose_name="Group",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Query Value",
                "verbose_name_plural": "User Query Values",
            },
        ),
        migrations.CreateModel(
            name="UserQuery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the object is active Unselect this instead of deleting objects",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the object was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time the object was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the Query",
                        max_length=250,
                        verbose_name="Name",
                    ),
                ),
                (
                    "negate_results",
                    models.BooleanField(
                        default=False,
                        help_text="Negate the results, excluding all matches from the queryset",
                        verbose_name="Negate Results",
                    ),
                ),
                (
                    "match_all_values",
                    models.BooleanField(
                        default=True,
                        help_text="If selected, All values must match, otherwise match any",
                        verbose_name="Match All Values",
                    ),
                ),
                (
                    "match_all_sub_queries",
                    models.BooleanField(
                        default=True,
                        help_text="If selected, All sub-queries must match, otherwise match any",
                        verbose_name="Match All Sub Queries",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="The database content type of the query.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="userqueries",
                        to="contenttypes.contenttype",
                        verbose_name="Content Type",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="The group that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="auth.group",
                        verbose_name="Group",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "sub_queries",
                    models.ManyToManyField(
                        blank=True,
                        help_text="User queries matched",
                        to="django_userqueries.userquery",
                        verbose_name="Sub Queries",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "user_query_values",
                    models.ManyToManyField(
                        blank=True,
                        help_text="User query values matched",
                        related_name="userqueries",
                        to="django_userqueries.userqueryvalue",
                        verbose_name="User Query Values",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Query",
                "verbose_name_plural": "User Queries",
            },
        ),
    ]

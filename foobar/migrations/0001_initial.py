# Generated by Django 5.0a1 on 2023-10-18 19:47

import django.db.models.deletion
import django_userqueries.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("django_roles", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Bar",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the object is active Unselect this instead of deleting objects",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the object was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time the object was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the Bar.",
                        max_length=250,
                        verbose_name="Name",
                    ),
                ),
                (
                    "bar_type",
                    models.CharField(
                        choices=[("s", "Simple"), ("x", "Complex"), ("c", "Compound")],
                        default="s",
                        help_text="The type of Bar.",
                        max_length=1,
                        verbose_name="Bar Type",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="The group that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="auth.group",
                        verbose_name="Group",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.roleuser",
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Bar",
                "verbose_name_plural": "Bars",
                "ordering": ["name"],
            },
            bases=(models.Model, django_userqueries.models.UserQueryFilterModelMixin),
        ),
        migrations.CreateModel(
            name="Baz",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the object is active Unselect this instead of deleting objects",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the object was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time the object was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the Baz.",
                        max_length=50,
                        verbose_name="Name",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="The group that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="auth.group",
                        verbose_name="Group",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.roleuser",
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Baz",
                "verbose_name_plural": "Bazzes",
                "ordering": ["name"],
            },
            bases=(models.Model, django_userqueries.models.UserQueryFilterModelMixin),
        ),
        migrations.CreateModel(
            name="Foo",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the object is active Unselect this instead of deleting objects",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the object was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time the object was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="100 characters or less",
                        max_length=250,
                        verbose_name="Name",
                    ),
                ),
                ("text", models.TextField(help_text="Text", verbose_name="Text")),
                (
                    "boolean_field",
                    models.BooleanField(
                        blank=True,
                        help_text="Optional Boolean Value",
                        null=True,
                        verbose_name="Boolean Field",
                    ),
                ),
                (
                    "date_field",
                    models.DateField(
                        blank=True,
                        help_text="Optional Date Value",
                        null=True,
                        verbose_name="Date Field",
                    ),
                ),
                (
                    "datetime_field",
                    models.DateTimeField(
                        blank=True,
                        help_text="Optional Datetime Value",
                        null=True,
                        verbose_name="DateTime Field",
                    ),
                ),
                (
                    "decimal_field",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Optional Decimal Value",
                        max_digits=19,
                        null=True,
                        verbose_name="Decimal Field",
                    ),
                ),
                (
                    "email_field",
                    models.EmailField(
                        blank=True,
                        help_text="Optional Email Value",
                        max_length=254,
                        null=True,
                        verbose_name="Email Field",
                    ),
                ),
                (
                    "float_field",
                    models.FloatField(
                        blank=True,
                        help_text="Optional Float Value",
                        null=True,
                        verbose_name="Float Field",
                    ),
                ),
                (
                    "ip_field",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Optional IP Value",
                        null=True,
                        verbose_name="IP Field",
                    ),
                ),
                (
                    "integer_field",
                    models.IntegerField(
                        blank=True,
                        help_text="Optional Integer Value",
                        null=True,
                        verbose_name="Integer Field",
                    ),
                ),
                (
                    "json_field",
                    models.JSONField(
                        blank=True,
                        help_text="Optional JSON Value",
                        null=True,
                        verbose_name="JSON Field",
                    ),
                ),
                (
                    "text_field",
                    models.TextField(
                        blank=True,
                        help_text="Optional Text Value",
                        null=True,
                        verbose_name="Text Field",
                    ),
                ),
                (
                    "time_field",
                    models.TimeField(
                        blank=True,
                        help_text="Optional Time Value",
                        null=True,
                        verbose_name="Time Field",
                    ),
                ),
                (
                    "url_field",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL Value",
                        null=True,
                        verbose_name="URL Field",
                    ),
                ),
                (
                    "uuid_field",
                    models.UUIDField(
                        blank=True,
                        help_text="Optional UUID Value",
                        null=True,
                        verbose_name="UUID Field",
                    ),
                ),
                (
                    "bar",
                    models.ForeignKey(
                        help_text="FK to Bar",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="foos",
                        to="foobar.bar",
                        verbose_name="Bar",
                    ),
                ),
                (
                    "bazzes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Optional list of Bazzes",
                        related_name="foos",
                        to="foobar.baz",
                        verbose_name="Bazzes",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="The group that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="auth.group",
                        verbose_name="Group",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that owns the object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="django_roles.roleuser",
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Foo",
                "verbose_name_plural": "Foos",
                "ordering": ["name"],
            },
            bases=(models.Model, django_userqueries.models.UserQueryFilterModelMixin),
        ),
    ]
